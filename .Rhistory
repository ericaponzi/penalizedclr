class(temp)
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
devtools::load_all(".")
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit4$lambda
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
devtools::load_all(".")
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
fit3$lambda
fit3$alpha
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
table(fitted = (stable1>0.6), nonzero_index)
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum, parallel = FALSE)
devtools::load_all(".")
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum, parallel = FALSE)
table(fitted = (stable4>0.6), nonzero_index)
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum, parallel = TRUE)
table(fitted = (stable4>0.6), nonzero_index)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
devtools::load_all(".")
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum, parallel = TRUE)
stable4
devtools::load_all(".")
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
parallel = TRUE,
B=10)
table(fitted = (stable4$P>0.6), nonzero_index)
stable4$lambda.seq
devtools::load_all(".")
devtools::load_all(".")
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p)
devtools::load_all(".")
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p)
devtools::load_all(".")
devtools::load_all(".")
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p)
i
start
p
lambda.list
a
joko
attempt1 <- find.default.lambatda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1 <- find.default.lambatda(response = Y,
penalized = X, stratum = stratum,
p = p)
devtools::load_all(".")
devtools::load_all(".")
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = c(100))
attempt1 <- find.default.lambatda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
p
g <- length(p)
le <- c(1, p[-g]+1) + nc
ue <- p + nc
le
ue
le <- c(1, p[-g]) + nc
ue <- p + nc
le
le <- c(1, p[-g]+1) + nc
ue <- cumsum(p) + nc
le
ue
devtools::load_all(".")
devtools::load_all(".")
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
cv.logitL1
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = c(20,80))
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
set.seed(123)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
set.seed(123)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
103+62+33
devtools::check()
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 1, 0.8),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 0.1, 0.4),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# probability check
hist(prob_case)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit2$lambda
fit2$alpha
table(fitted = (fit2$penalized != 0) * 1, nonzero_index)
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
fit3$lambda
fit3$alpha
table(fitted = (fit3$penalized != 0) * 1, nonzero_index)
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
table(fitted = (stable1>0.6), nonzero_index)
table(fitted = (stable1$P>0.6), nonzero_index)
stable2 <- stable.clr(response = Y,
penalized = X, stratum = stratum)
table(fitted = (stable2$P>0.6), nonzero_index)
lambda.seq <- default.lambda(X, Y, stratum, alpha=1)
lambda.seq
stable3 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = lambda.seq)
table(fitted = (stable3$P>0.6), nonzero_index)
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
parallel = TRUE,
B=10)
table(fitted = (stable4$P>0.6), nonzero_index)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = c(20,80))
lambda.list <- find.default.lambda(Y, X, stratum, alpha=1, p=p)
stratum
lambda.list <- find.default.lambda(Y, X, stratum, alpha=1, p=p)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
lambda.list <- find.default.lambda(response = Y,
penalized = X,
stratum = stratum, alpha=1, p=p)
lambda.list
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p)
stable3 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = lambda.seq)
table(fitted = (stable3$P>0.6), nonzero_index)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list=lambda.list)
table(stable.g1$Pistab>0.6, nonzero_index)
p
# two groups of predictors
p <- c(80, 20)
# percent of non-null variables
p_nz <- c(0.2, 0.8)
m_nz <- round(p*p_nz, 0)
# number of different strata
K <- 200
# number of cases and controls
n_cases <- 1
n_ctrl <- 1
set.seed(123)
# covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 2), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 0, 0.8),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 0.1, 0.4),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
#### function testing
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit2$lambda
fit2$alpha
table(fitted = (fit2$penalized != 0) * 1, nonzero_index)
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
fit3$lambda
fit3$alpha
table(fitted = (fit3$penalized != 0) * 1, nonzero_index)
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
fit5 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda=1, p=c(20,80),
standardize = TRUE)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
which(stable1>0.6)
table(fitted = (stable1$P>0.6), nonzero_index)
stable2 <- stable.clr(response = Y,
penalized = X, stratum = stratum)
table(fitted = (stable2$P>0.6), nonzero_index)
lambda.seq <- default.lambda(X, Y, stratum, alpha=1)
stable3 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = lambda.seq)
table(fitted = (stable3$P>0.6), nonzero_index)
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
parallel = TRUE,
B=10)
table(fitted = (stable4$P>0.6), nonzero_index)
set.seed(123)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list=lambda.list)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
lambda.list <- find.default.lambda(response = Y,
penalized = X,
stratum = stratum, alpha=1, p=p)
devtools::load_all(".")
devtools::check()
lambda.list
unlist(lambda.list)
devtools::load_all(".")
# two groups of predictors
p <- c(80, 20)
# percent of non-null variables
p_nz <- c(0.2, 0.8)
m_nz <- round(p*p_nz, 0)
# number of different strata
K <- 200
# number of cases and controls
n_cases <- 1
n_ctrl <- 1
set.seed(123)
# covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 2), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 0, 0.8),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 0.1, 0.4),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
lambda1
lambda
lambda1
unique(lambda1)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
p
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit2$lambda
table(fitted = (fit2$penalized != 0) * 1, nonzero_index)
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
fit3$lambda
fit3$alpha
table(fitted = (fit3$penalized != 0) * 1, nonzero_index)
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = FALSE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
fit5 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda=1, p=c(20,80),
standardize = TRUE)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
which(stable1>0.6)
which(stable1$P>0.6)
table(fitted = (stable1$P>0.6), nonzero_index)
stable2 <- stable.clr(response = Y,
penalized = X, stratum = stratum)
table(fitted = (stable2$P>0.6), nonzero_index)
lambda.seq <- default.lambda(X, Y, stratum, alpha=1)
stable3 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = lambda.seq)
table(fitted = (stable3$P>0.6), nonzero_index)
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
parallel = TRUE,
B=50)
table(fitted = (stable4$P>0.6), nonzero_index)
set.seed(123)
attempt1 <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
attempt1
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list = attempt1)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
require(ipflasso)
help(ipflasso)
help(library=ipflasso)
library(help=ipdlasso)
library(help=ipflasso)
library(clogitL1)
library(help="clogitL1")
?penalized.clr
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
library(penalizedclr)
?penalized.clr
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
?penalized.clr
require(penalizedclr)
?penalized.clr
installed.packages("penalizedclr")
?penalized.clr
?clogitL1
?penalized
require(penalizedclr)
?penalized.clr
?penalized.clr
?clogitL1
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
devtools::check()
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
devtools::check()
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
devtools::check()
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
?stable.clr.g
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
?stable.clr.g
?penalized.clr
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
source('~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR/R/stable.clr.g.R')
?stable.clr.g
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
rm(list = c("stable.clr.g"))
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
?stable.clr.g
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
?stable.clr.g
?cv.clogitL1
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
?find.default.lambda
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
devtools::check()
?find.default.lambda
require(penalizedclr)
?penalized.clr
devtools::load_all("~/Dropbox/WorkingProjects/MultiOmics/PenalizedCLR")
?penalized.clr
library(penalizedclr)
?penalizec.clr
?penalized.clr
